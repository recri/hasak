* Arbiter is hard
** Just had to learn how to output more than one stream at a time
   as it's the only Audio unit I've written that has more than
   one output.
** Arbiter processes multiple input key streams and sends 
   at most one on to key sidetone, IQ, key_out, and ptt_out.
** I call each input key stream a vox, because each is a voice and
   each generates a PTT stream like a voice operated relay (VOX).
** The plural of vox is voces (think voice and voices).
   Sorry, not sorry, for the pedantry, but each vox is a keyer and
   the whole system is a keyer, so I needed another word.
** The voces are defined in config.h as
*** KYR_VOX_NONE 0	// inactive
*** KYR_VOX_S_KEY 1	// straight key
*** KYR_VOX_PAD 2		// paddle
*** KYR_VOX_WINK 3		// text vox for Winkey protocol
*** KYR_VOX_KYR 4		// text vox for the keyer    
** The initial arbiter implementation toggles between KYR_VOX_NONE and KYR_VOX_PAD
** If no vox is active, activeVox = KYR_VOX_NONE.
** If a stream becomes active, then activeVox = KYR_VOX_STREAM   
   and active_ptt_tail = get_param(activeVox, KYR_P_PTT_TAIL)
   and stream remains active until ptt drops.
** If a higher priority stream becomes active while a lower priority
   stream is holding ptt.
* Generate PTT in ptt_delay  
**  translate incoming key buffers into run length +mark-space
   stored into a ring buffer with ptt_head time samples of 0.
** If the buffer is -AUDIO_BUFFER_SAMPLES   
   then just send it
   prepended to key, and ptt_head time samples of on prepended
   to ptt, length of ptt runs adjusted with ptt_tail time.
** 
  immediately and work your way through the queued keying until
  ptt_tail expires.
  Needs to know current vox to access correct ptt_head_time, 
  ptt_tail_time.
* Arbiter only needs ptt_tail value
  to count down while waiting for zeros to finish.
  Needs to know current vox to access correct ptt_tail_time.
  But it decides what the current vox is, so it can have it.
* Finish off parameters
** Parameters communicated via MIDI (or Winkey) as NRPN's
** First set of NRPN's are globals and defaults for voices.
** They are stored as an array of MSB LSB values as received.
*** 16 keyer parameters (32 bytes)
*** 
**  How do they get into the modules that need them?
***  get_param(VOX, NRPN) accesses the VOX specific bank 
    then falls back to the default bank to fetch a value for a NRPN.
*** get_param(NRPN) expands to get_param(activeVox,NRPN)
*** get_param(KYR_VOX_NONE, NRPN) gets the default value.
*** Each keyer knows which VOX it is.
    it can fetch the key timing parameters each time they are
    required, it's fast, and it won't be interrupted by the
    audio loop, it is the audio loop.
*** The arbiter knows which VOX is active at the current sample
    it can fetch the ptt tail each time its required.
*** everyone else can see the global activeVox as it is updated,
    which has nothing to do with the state in the sample loop,
    which is that it changes at some sample index, which happens
    at a different point in time for each module.
*** So maybe the arbiter updates activeVox once per buffer?
    so to switch activeVox arbiter simply writes a global which
    takes effect immediately for all subsequent stages, which
    include the oscillator, ramp, ptt_delay, ....
**** So the override of a vox takes minimum of two buffers,     
     one to stop the keying of the preempted vox, using its ramp and frequency,
	that just sends a zero buffer to the key line,
     then wait for the ramp off time to expire, which may be several buffers,
     then set the new vox at the beginning of the next buffer,
     this is going to chop off the start of the pre-empting vox.
***  But the oscillator and ramp generator and ptt_delay don't know.
    So the oscillator, ramps, and ptt_delay use the global activeVox
    to fetch parameters.
    The ramp can do this when each transition starts.
    The ptt_delay can do this when a transition starts.
    The oscillators are free running, if they were started and stopped
    by the ramp, then they could pick up frequency and sideband then.
    And when do changes get picked up?
    Keyers can pick up element lengths when they go to make an element.
    Ramps can fetch rise and fall times at ramp start.
    ptt delay can fetch head and tail time.
    turning the oscillator on and off would save bundles of computation
    and allow the frequency to adapt
* sine can be turned off by setting level = 0
* sine could be turned on by the start of the ramp
* sine_I, sine_Q, and ramp could be combined.  
* the pin interrupt is probably running at lower priority than audio library
  so with audio library consuming 12-25% of cpu we're missing 12-25% of the
  input and output samples.
  Found a discussion which put default pin interrupt priority at 128 in
  Teensy3, along with instructions on how to find the port for a pin and
  bump its interrupt priority.  Ditto for Teensy4.
  But then we need to protect from pin interrupts while packaging up the
  sampled bits in the audio library loop.  Probably double buffer to
  minimize time with interrupts disabled.
  Use a circular buffer and only keep the most recent AUDIO_BLOCK_SAMPLES
  on input, copy them into the output buffer in two chunks, but if you
  get the timing right it will only be one chunk.
  Means I'm going back to only handling bit values in a byte.
  uint8_t buffer[AUDIO_BLOCK_SAMPLES], wptr, n;
  wptr = n = 0;
  void send(uint8_t val) { 
	n += 1;
	buffer[wptr++] = val;
	wptr %= AUDIO_BLOCK_SAMPLES;
  }
  update() {
	__disable_irq();
	uint8_t save_wptr = wptr, save_n = n;
	bcpy(buffer, block->data, AUDIO_BLOCK_SAMPLES);
	wptr = n = 0;
	__enable_irq();
	// now make things right
	if (save_n < AUDIO_BLOCK_SAMPLE) underrun += AUDIO_BLOCK_SAMPLE-save_n;
	else if (n > AUDIO_BLOCK_SAMPLE) overrun += save_n-AUDIO_BLOCK_SAMPLE;
	// ...
  }
  
