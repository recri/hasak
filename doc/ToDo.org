* Todo list as of 2022-02-24
[ ] move the indivdual mixer levels into ephemeral NRPNs
	compute them from enable bits and named level
	and balance controls.
[ ] keep a separate array of current levels and current targets
	and current points in ramps.
[ ] make the enable_lr bits the primary enable record
[?] make the mixer audio class accept raw mixer multipliers
	in addition to float gains?
[x] rename KYRP_* to NRPN_*, KYRN_* to NOTE_*, KYRC_* to CTRL_*
[x] rename KYRV_* to VAL_*
[?] note_listen_all(my_listener) listens to all notes
[?] ctrl_listen_all(my_listener) listens to all ctrls
[?] nrpn_listen_all(my_listener) listens to all nrpns
[ ] omit ephemeral NPRPs from JSON
[ ] timer is an add on, explains how to implement millis
	leaves the rest to the user
[ ] move debounce into the straight key note handler.
[ ] paddle key listener can have a different debouncer
	one which listens to the output of the keyer
	and adjusts the 'stickiness' of the paddles
	to influence A/B mode timing, which has always
	been hostage to the vagaries of sample/latch
	timing.
[ ]  The paddle keyer may emit 'element notes' of '.', '-',
	and ' ' which get later keyed to 'on' and 'off'.
	Inter-element space is omitted, one ' ' is an
	inter-letter space, two ' ' in a row make an
	inter-word space.
[ ] listener heads move into listener.h, a byte token
[ ] write the string mechanism.
[ ] test the json transfer mechanism.
[ ] get a makefile build to escape from the Arduino nonsense.
[ ] move the time counters out of the src/midi.h block
	someone might want different periods, or none.
[ ] need additional ptt modules?
[ ] need commands for adding and removing note routing
	reimplement cwroute.h as programmed
[ ] should midi.h include the after_idle handling?  midi_loop2()?
[ ] need the oldvalue in the listener sometimes, changes
	the signatures of all the callback functions, though I
	think that -fpermissive allows it.
[ ] DEBOUNCE should be % of dit
[ ] or should there be another control which controls
	the paddle's DITDAH perception, the Winkey PaddlePoint
	acts to debounce the paddle pressed or released, but it also 
	locks the other paddle sense for the same period.  
[ ] There is a littlefs wrapper for the Teensy, 
	but writing to program flash disables interrupts 
	for the duration, writing EEPROM probably does
	the same. But a RAM fs would be different.  And the
	Teensy 4.1 can have additional memory.
[ ] eeprom is wear leveling on write, so it's actually writing
	more than one location, so writing a page at a time
	is unlikely to get any economy of scale.
	but loading an eeprom image in memory and passing it
	to a background loop process that does one byte per
	loop might work well.
[ ] redo mixer automation ramps as every_buffer(listener) that resets the mixer.gain()
	can use the ramp code.
[ ] move the ramp code into src from src/Audio.
[ ] use the ramp code for keyed oscillator.
[ ] make the keyed oscillator handle negative frequencies.
[ ] make a "boolean" flag to mark note, ctrl, and nrpn values
	as boolean values.  Might store them more efficiently.
[x] rewrite src/midi.h to eliminate the hoist() interface.
[x] make a high range of nrpns for internal use, not saved,
	but potentially observable to watch the operation.
	move xper_dit etc there.
[ ] move the midi.h modulating nrpns into the front and have midi.h
	use them directly. KYRP_CHANNEL, KYRP_ECHO_ENABLE.
[-] move the nrpn echo index into the ephemeral nrpns?
[x] need an unlisten() api for switching listener targets
[x] add unlisten to src/midi.h
[x] add listen_remove to listeners.h
[x] change the call to invoke_listeners to include oldvalue
[x] change the signature of listener to void (*f)(int,int)
[x] change all the listeners to match
[x] fix the broken text keyer
[x] fix the broken speed control
[x] make a low range of nrpns for the midi controller exclusively
[x] put live values into the NRPN array, loops, samples, updates, millis
	and fire listeners on them to call functions at regular periods
[x] insert Steve's WM8960 nrpns into the ephemeral block
[x] make a listener node allocator, so we can make listeners inside loops,
	or in functions with note, ctrl, or nrpn parameters.
[x] find and fix the bug that breaks the left paddle.
[x] test that the json.h file produces legit json string
	with json_pp.
[x] refactor adc to report input raw reads to a fixed nrpn.
	using the fixed nrpn as the current value
	to filter out no change.
[x] which is heard by a map listener who translates
	into the target nrpn, using the target nrpn
	to identify the mapping and filter out no change.
[x] refactor inpin -> in, outpin -> out, inadc -> adc
[x] refactor adc into padc.
[x] make the pin_listener for padc, make sure the pin is a valid pin
[x] initialize pins in define at 127.
[x] I guess adcmap.h needs to refactor, too.
* Todo list as of 2022-02-14
[x] if KYRF_NONE was > than all real fists, 
	then the test for not sending from my_fist would be
	active_fist < my_fist
[x] incorporate ring_buffer.h
	used by keyer_text.h
[x] clean out unused src/Audio/*
[x] move listener and after code into c++ classes
	and test them
[x] sort the after list by time to expiry
	though it might not make much difference
[ ] get statistics on listeners and afters	
[-] make nrpn morse table NOTSET by default
	backed by the const table in flash
[-] make mixers nrpns be NOTSET by default
	with 0dB backing value default.
[ ] put active voice, st decode speed, rx decode speed into
	nrpns, but protect them against overwrites.
[ ] implement decode.
[x] move paddle keyer into it's own loop, minor rewrite.
[x] move text keyer into the event loop
[ ] implement common core functions
[ ] implement JSON function
[ ] implement string passing proposal
[x] digital pins - add slots for second
	straight key, paddle, ptt switch, tx out, tx ptt out.
[x] make all digital pins NRPN configurable off or on PIN
[x] make all digital pins NRPN configurable for notes
[-] make all digital pins NRPN configurable for debounce
[-] make all digital pins NRPN configurable for sample rate
[x] analog pins - add slots for additional adcs
[x] make all analog pins NRPN configurable for off or PIN
[x] make all analog pins NRPN configurable for NRPN
[-] make all analog pins NRPN configurable for sample rate
[x] map notes, controls, and NRPNs into a unified range of tokens,
[x] separate arrays of storage slots for notes, controls, and nrpns
[x] make all notes and controls and nrpns listenable,
	use a byte array to store the index into a listener
	head array and other flags.
[x] make all notes, controls, and nrpns delayable, general
	timing mechanism.
[ ] add extension interface for using hasak as a framework for other
	keyer implementations.  Keep Chuck Broadwell W5UXH
	chuck.broadwell@gmail.com informed.
[x] move all non-essential activity out of the MIDI control change
	callback, mark altered controls in a bitmap and process the
	changes in the loop.  Most especially, no nrpn_echo's inside
	the control change callback.
[x] write a modified Mixer4 that polls for level and mute from the
	nrpn array rather than needed explicit settings.
[ ] make default serial monitor start winkey when needed
[ ] verify bare Teensy3/4 and Teensy3/4+AudioAdapter
[x] transition tweening, changing the internal levels and mutes
	so output mixer gains (24) 
	and mutes (12), 
	and the sidetone levels (6)
	should happen in small steps over a period of time
	rather than popping to the new value.
[ ] mask specifying active high/low for digital inputs/outputs.
[ ] 2nd rise and fall ramps for product ramp
[ ] compute per sample ramp, build by interpolating precomputed
	tables first, then filling in the real values.
[ ] implement key_out compensation.
	the purpose of compensation is to make the keyed signal
	match the sidetone when the transmitter clips or stretches
	keying pulses. So key out compensation stretches or clips
	the keying pulses by a specified time.
[ ] reimplement ptt_enable
[ ] solve the initialization bug
	still mysterious, same nrpn values except for gaps,
	but keyer still broken.
[ ] make a key/ptt led indicator for the key/ptt output jack
* Todo list as of 2022-02-07
[x] make voices into fists, named KYRF_*
[x] make notes named KYRN_*
[-] queue events generated during usbMIDI.read() to fire
	during loop time.  Better to just do it immediately,
	the listener can queue time consuming tasks for the
	loop.
[-] provide a queue for usbMIDI send during usbMIDI read.
	ah, just send them, I don't yet know that the initial
	write doesn't get through, or that writes during read
	are actually harmful.
[x] maintain listener and after used counts	
[x] #if'ed out the old audio graph
[x] added elapsedSamples.h for easy sample count timing.
[x] implemeted note listeners
[x] implemented note after timeouts
[-] rewrite the keyer timings to Âµs
	no, use the sampleInterrupt counter to time by samples
[x]   inpin.h - digital read pins, debounce, update notes
[x]   note.h - toggle note, not sending midi, that's a listener job
[x]   keyer.h and keyer_paddle.h, straight key and iambic keyers.
	iambic and adapters almost entirely done with existing
	sources, yay reuse.
[x]   arbiter2.h, give the key to the highest priority input.
[x]   keyptt.h, generate tx key and tx ptt from sidetone key
[x] get the license into all the source files
[x] set PTT_HANG_TIME to 0
[x] generate JSON format of config.h
[x] correct inverted note sense, no pttout by default.
[x] KYRP_NOTE_ENABLE wasn't handled in nrpn_set(), reworked midi_send_toggle
[x] move nrpn.tcl to scripts directory
[-] separate NRPN, Control Change, and Notes channels
	receive on any, but only send on designated
	channel.  No, one channel is enough.
[x] reorder the built in notes so key out, ptt out, and tune 
	come first
[x] default TX_ENABLE true
[x] enable notes bitmap
[-] make ADC?_INVERT a settable parameter
	No, interpolate endpoints for mapping ADC values into NRPN values,
	correct inverted by swapping the endpoints
[-] change extPTT to options { none, ptt-rto, ttt-tto }
	needs title on select option element.
	No, it's more complicated than that.
[-] write an audio library component to inject MIDI note states
	into the sample stream to implement programmatic control
	of LPAD, RPAD, SKEY, TUNE, BUTTON, KEYOUT, and PTTOUT.
	no, don't do that.
[-] rewrite winkey without second serial monitor
	rewrite winkey some day.
[-] mixer set with left and right in same nrpn
	127 does seem to be a reasonable level parameter
	Oh, maybe something like that.
* Todo list as of 2022-01-18
[-] inject midi note states into pollatch
	backed out
[-] save midi note states in midi_note_on
	don't see it
[x] move latch variables into hasak structure
[x] define KYRP_KEY_REMOTE to enable remote keying
[x] reduce ADC_ENABLE to boolean
[x] change to dB/10 for easier UI display
[-] change to Hz/100 for precision tuning guitars ;)
	can't do that, range would be 0 .. 163.84
[x] add mixer output unmute bitmap nrpn, leaves mixer levels be.
[x] reimplement compensation
	put it back into the keyer timing
[x] put kyr_nrpn[] in a struct with kyr_msg[] and the eeprom headers
	and the extended nrpns which have int32_t values so they can
	hold the number of samples per element.  Then the eeprom can
	be written and read with a few gets and puts.
[x] rewrite get_nrpn and get_vox_nrpn to consider the range of nrpn
	offered.  It already did, and they're inline so they can 
	fold constant arguments, ie nrpn, into the code generation
[x] use get_nrpnx() for accessing the extended precision nrpn values.
[x] make nrpn_update_timing notice whether any nrpns are vox special
	so it can write the computed timing to the vox special extended
	storage rather than the default.
[x] HSMS/QRQ to supersize the speed control, HSMS goes up to 4000 
	letter/minute, or 800 words/minute
[x] QRSS to superlong the speed control.  Extreme QRSS goes to 0.0133 wpm
	which is between 1/128 and 1/64 wpm, so a fraction numerator with
	implicit denominator 128 will cover that with speed=0, also gets
	fractional part of wpm speed >= 0, really need the extended
	samples/element for this.
[x] mixers as AudioMixer4 mixer[6];
	doesn't work, what don't I understand?
	do it as pointers and it works
[-] expand VOX specific parameters to KYRP_<VOX>_<PARAM> definitions
	too much information
[-] rename KYR_ to KYRC_ if configurable
	did some
[x] slow down echo all NRPNS to not overflow MIDI channel
[-] make virtual NRPNs for
[x]	load defaults, 
[x]	load eeprom,
[x]	save eeprom,
[x]	echo all settings
[x]	for keying a character on kyr
[x]	for keying a character on wink
[x]	for reading and writing saved messages
[-]	for playing message on kyr
[-]	for playing message on wink
[-]	for seting index into kyr_msgs
[-]	for storing a byte into kyr_msgs
[-]	for reading a byte from kyr_msgs
[x] annotate config.h for postprocessing into javascript
[-] add named stored messages, with named interpolations,
	saved to and restored from eeprom
[-] plug a phone headset into a splitter and into microphone jack
	and see if you read ExT_PTT
[-] write cwkeyer.js progressive web app controller
[x] move COMP into vox independent parameters
[x] move PTT timing into vox independent parameters
[x] move PAD config into vox independent parameters
[x] move RAMP config into vox independent parameters
[x] disable codec's which don't return true to codec.enable()
[x] reduce codec NRPN's to the common control interface.
[x] compile time hdw_out and adc_in
[x] no adc config in inputs.h, simply add 4 analogRead()
	to construct a 12 bit input
[x] rename nrpn enumerations as KYRV_*
[x] build out nrpn_setup to cover all nrpns.
[x] separate nrpn_set_defaults() from nrpn_setup()
[x] implement nrpn_echo
[x] make output notes configurable
[x] better names for KYRP_NOTE_(IN|OUT)_CHAN_(IN|OUT)
[x] give voices their own notes
	better to simply send 1+vox as velocity for noteOn?
[x] use a logarithmic ramp for volumes
[x] make pot pins configurable.
[x] fix the broken volume, it gets stuck.
[x] rename KYRP_HEAD_PHONE_VOLUME to KYRP_VOLUME
[x] drop dbdown conversion for KYRP_VOLUME, already db scale
[x] simplify input.h,
[x] reduce frequency of reads in input.h
[x] get full 0 .. 127 scale in input.h
[x] clean up missing codec nrpns in wm8960
[x] implement echo all
[x] implement save to eeprom
[s] implement read from eeprom
[x] make a VERSION nrpn
[x] rename PTT_SW as EXT_PTT.
[x] replace SEND_MIDI/RECV_MIDI with channels
	KYRP_SEND_INPUT_NOTE_CHANNEL and KYRP_SEND_OUTPUT_NOTE_CHANNEL
	replace KYRP_SEND_MIDI
	KYRP_RECV_INPUT_NOTE_CHANNEL and KYRP_RECV_OUTPUT_NOTE_CHANNEL
	would replace bit values of KYRP_RECV_MIDI
	with channel == 0 muting the action.
* Todo list as of 2020-04-03
[x] 2Serial+MIDI+Audio is possible, one Serial for winkeyer, one for monitor
https://forum.pjrc.com/threads/66330-Dual-SerialUSB-and-MIDI-config-possible?highlight=teensy4+usb+midi
[x] change send midi true or false to none, key_out, key_in, or key_both
[x] change ctrlr to match send midi options
[x] implement in note sender
[x] midi connection lost on unplug/replug?
	Ctrlr can't send MIDI CC, Jack doesn't see MIDI paddle events,
	midisnoop sees nothing.
	it happens, some apps don't listen for connect/unconnect, use stale connection
[x] eliminate mic bias and mic impedance,
	as the default values are the only useful ones
[x] change ctrlr to match mic bias/mic impedance elimination	
[x] split kyr_in_channel to differentiate kyr_cc_in and kyr_note_in, ditto out
[ ] nrpn's: add channel and note configuration to .
[ ] ctrlr: add channel and note configuration to .
[ ] Implement winkey control of keyer.
[ ] winkeyer: add additional prosign characters.
[x] winkeyer: add 1/2 dit additional space for |.
[ ] add pause to text keyers.
[x] rewrite text keyers to use RingBuffer.
[ ] winkeyer: implement XOFF 
[x] Winkeyer: map paddle switch point to debounce.
[ ] simplify multiple banks of keyer voices down to Voice A and B, so you can have two voices
	and switch between them to compare settings.
[-] write web app to install hex files
	not possible with existing Web USB API, rather possible, but forbidden for security reasons	
[ ] decode sidetone out, sort into timestamped queues by vox.
	convert sidetone key line to run lengths.
	prior to st_enable test, because local is always
[ ] write tcl/tk controller/installer/winkey driver in a starpack?
[ ] would require libusb for the hex file upload
[ ] or do it with a copy of teensy_loader_cli?
[ ] unless it can be done with HID
[ ] add Snooze library, hibernate on inactivity, wake on paddles.
	Teensy 4.0 resets on wake.
	Power consumption about 6ma in hibernate.
	Currently conflicts with EEPROM write, maybe.
[ ] implement a command mode based on headset button morse.
	k3ng commands, 
	using up/down buttons for adjustment.
	with X transitioning into paddle control.
[ ] Implement local control of keyer.
	k3ng immediate mode should work, most if it is covered.
[ ] implement a command line mode over serial monitor.
	k3ng commands,
[ ] Apply headphone volume to hdw_out mixer.
[ ] Give the output mixers a master out level
[ ] Redo output mixers 
	[ ] a bitset for selecting inputs
	[ ] an overall gain for the mix
	[ ] an overall balance for left/right 
	[ ] still leaves relative levels of mix to resolve, 
	especially for RX audio versus sidetone
[ ] Implement save/restore parameters to EEPROM
	[ ] save parameters as the nrpn block and a bitset of
	which have been set.
	[ ] restore parameters and bitset and apply those which
	must be pushed, but no hard volume changes.
[ ] Implement save/restore parameters as SYSEX
	[ ] nibblize the nrpn block and send it to the ctrlr
	which is built for slamming those things around.
[ ] Implement a reverse snapshot, sending CC NRPN's for all parameters
	to Ctrlr.
[ ] Add tab to ctrlr panel for specifying morse key codes for characters.
[ ] Add tab to ctrlr panel for the mixer matrix, or mixer presets.
[ ] Pan sidetone to localize.
[ ] Allow line-in audio to route through filters to headphone-out.
[ ] Allow line-in IQ to route through sdr and filters to headphone-out.
* Todo list as of 2020-03-16
[x] fix the key pre-empt.
[x] Implement default parameters from flash.
[x] Change Ctrlr ptt_tail and ptt_head to ms units.
[x] Mixer uses three channels by default
[x] Change ptt_tail and ptt_head to ms units in hasak.
[x] KYRP_PTT_TAIL, if set to IWS, will overflow at 10WPM
	even as ms/10.  Change PTT_* to ms.
[x] KYRP_PER_IWS overflows int16_t nrpn[] at 10WPM.
	Set minimum speed to 10WPM, store element lengths at
	ms/10, scale to samples on fetch.  Or keep element
	lengths at ms.
[x] Figure out how to detect the headset switches.
	They're just voltage level changes.
	Need to skip first transient values.
	Need to debounce
[x] Move headset switch adc readings into NRPN values
[x] Convert some input_sample/output_sample to input_byte/output_byte.
[x] Remove updated, overruns, underruns, reset, id from input/output_sample/byte.
[x] Unroll 8 samples in sample loops in input/output_sample/byte.
[x] remove KYRP_RECV_MIDI, because I cannot do it simply.
[x] compile at 150MHz clock to cut power consumption from 100ma to 50ma.
[x] ptt_head breaks key and ptt.
[x] Test ptt_delay.
[x] Delay line is producing streams of zeros without dropping active_stream.
	hard time getting it unsorted, the result is sort of ugly
[x] Debounce all the key inputs.
[x] Strange interaction between sending midi events and receiving bad
	audio.  Observed while keying http://github.com/recri/keyer in
	jack with midi notes sent by Teensy and listening to the result
	in Teensy.  Crackles, pops, overruns, and lockups at 48k, warbling
	at 44100.  Not present if jack listening through the laptop audio,
	not present if keyboard keys are used to key the keyer when listening
	through the Teensy audio.  Is it usbMIDI.sendNow() disrupting the
	usbAudio streaming?  No, that changed the effect but did not fix it.
	Fixed with debouncing key switch input. No, it was reducing the
	time spent in the sample rate interrupt.
[x] Allow IQ to route to line-out to key a softrock.
[?] Rewrite effect_mute and put some of them back into the graph.
[?] Try the fixed point complex rotor, both for sincos and ramp,
	and with multiply_32x32_rshift32 instruction, it might.
[?] Would still need to call sin/cos to compute the phase increment.
[?] Add phase shifting filters to localize rx_audio.
[?] implement KYRP_IQ_PHASE excess 1<<13 tweak to iq phase, units tbd, +/- 8k
	only needed for RX
[?] implement KYRP_IQ_BALANCE excess 1<<13 tweak to iq levels, units tbd, +/- 8k
	only needed for RX
* Todo list as of 2020-03-09
[x] send midi sending many key_out and ptt_out note ons.
	it was miswritten, but it didn't work anyway because key_out and ptt_out
	are output pins, can't read them.  So store to memory and read from there.
[-] Ease in the volume changes, get rid of the pop.
[-] get rid of power on POP! in headphones
	happens in the PJRC sgtl5000.enable() code, decline to rewrite.
	happens even if headphones are muted and headphone volume is 0.
	doesn't happen if you're plugged into the VGND'ed headphone jack,
	so maybe fixed if you turn off the capless headphone enable.
	No, changing this bit:
// 2	CAPLESS_HEADPHONE_POWERUP Power up the capless headphone mode
//				0x0 = Power down, 0x1 = Power up
	in the part of enable() which configures CHIP_ANA_POWER does not
	fix the problem.
	Maybe feeding 3.3V to the microphone bias where ground is VGND 1.55V
	would work?
[x] make tone setting update frequency.
[x] debug tone setting update.
[x] rationalize usage reports
[x] find normalization for cpu_cycle usage.
[x] Test the 48kHz sample rate.
[x] Implement other iambic keyers.
[x] Add KYRP_AUTO_ILS and KYRP_AUTO_IWS to nrpn_set().
[x] figure out why the text keyer makes a long dah for space.
	did not figure it out, but it went away.
[x] Add the vox specific NRPNs to nrpn_set().
[x] Add the vox specific NRPNs to get_vox_nrpn().
[x] Make ctrlr for iambic keyer selection.
[x] Implement iambic keyer selection.
[x] Default mix (rx+st) -> (i2s+hdw), (iq->usb)
[x] Implement arbiter.
[x] Debug arbiter implementation.
[x] k1el keyer has the hiccups.
[x] Test ptt_head.
[x] Test ptt_tail.
[x] IQ key_ramp confused.
[x] Implement ptt_delay.
[x] Debug ptt_delay as incorporated into arbiter
[x] implement send midi under get_send_midi()
[x] implement receive midi under get_recv_midi()
[x] clean up linkage, it doesn't need the set_*() functions.
[x] clean up linkage, get* should be in order of config.h
* Todo list as of 2020-03-04
[x] implement headset microphone.
[x] get rid of the ramp crunches, 
	I think I'm passing an overflowed ramp value, I'm hearing the ramp
	scalar go negative at the peak.  Much less than earlier, but still
	a click that I can hear.
[?] Figure out why the buffer allocation goes to 64k
	It appears to have fixed itself somewhere.
[x] Figure out why total audio cpu usage is now off scale while audio component
	cpu usages are very low and reasonable.  Very dicey percentage computation
[x] Add NRPN for mixer matrix presets.
	in principle, 24 NRPN's allocated, but 
[x] key ramp should fetch rise and fall ramp parameters at start of ramp on,
	then if the arbiter pre-empts the voice it will stop with its own
	voice parameters, the new active voice will take effect at the next 
	on ramp.
[x] reimplement hann and blackman harris ramps.
[x] add linear ramp.
[x] reimplement sine table.
* Todo list as of 2021-03-01
[x] add vox to keyer constructors
[x] declare keyer timing, tone, and ramp getters.
[x] define keyer timing, tone, ramp getters.
[x] define nrpn getter.
[x] add back the perdit, perdah, peries, perils, periws pseudo-nrpns
[x] figure out if that blackman-harris is right, it is.
[-] add ramp pseudo-nrpns, translating 10ths of ms into samples
	I don't think it's necessary.  It's one multiply.
[x] Redo the ramp code.
[x] Finish up the text_input
[x] Install the lorem ipsum test text
[x] Make the reusable buffer to run length code
	int16_t run_length(audio_buffer_t *block) returns the length of the first
	run in *block.
	Not necessary, the paddle is debounced by the keyer, text has no bounces,
	the straight key is the only signal with bounces, everything else is
	streams of zeros or ones longer than four 128 sample buffers, so each
	buffer (except for straight key) is describe by the initial run length.
[x] Make a keyed oscillator effect.
	[x] Can turn the oscillator(s) off when not in use
	[x] Poll oscillator and ramp parameters when activated
	[-] Use the 1024 point window functions for the ramps.
		no, only need the first half.
	[x] Continue to interpolate the ramps.
	[x] Continue to interpolate the sine.
[x] Implement the rest of the parameters, for some value of rest:
	[x] Should all be polled at the last moment before they
	are applied.
	[x] keyers poll for dit, dah, ies, ils, iws at the
	moment the element is to be started.
	[x] oscillators poll for frequency and phase when started
	at the beginning of an element.
	[x] ramp poll for ramp type and time length when starting
	the ramp.
	[x] but the codec controls won't be polled, they must be
	pushed, but no hard volume changes.
[x] Figure out floating valued modulators.  I can specify a
	controller which displays a floating point value, but
	when I try to scale it to an integer value for transmission
	it's already been truncated to its integer value.
	I don't think they work, none of the example panels uses
	anything but int values.
[x] Add a 128 or 256 NRPN block for setting the 14 bit morse key codes 
	for 7 or 8 bit input characters.  Yeah, just 64 slots from ! to `.
[x] Define NRPN's in 4 blocks, pad each block so there's room for
	revisions without breaking existing assignments,
	nrpn[N_SOFT_NRPN+N_CODEC_NRPN+N_VOX_NRPN+(N_VOX*N_VOX_NRPN)
	[x] codec NRPN's
	[x] global keyer NRPN's
	[x] morse code table
	[x] mixer matrix
	[x] default keyer voice NRPN's
	[x] keyer voice specific NRPN's
[x] Move the IQ_ENABLE and IQ_ADJUST NRPN's to SOFT global block.

	
