* Todo list as of 2020-03-09
[x] make tone setting update frequency.
[x] debug tone setting update.
[x] rationalize usage reports
[x] find normalization for cpu_cycle usage.
[x] Test the 48kHz sample rate.
[x] Implement other iambic keyers.
[x] Add KYRP_AUTO_ILS and KYRP_AUTO_IWS to nrpn_set().
[x] figure out why the text keyer makes a long dah for space.
	did not figure it out, but it went away.
[x] Add the vox specific NRPNs to nrpn_set().
[x] Add the vox specific NRPNs to get_vox_nrpn().
[x] Make ctrlr for iambic keyer selection.
[x] Implement iambic keyer selection.
[ ] Figure out how to detect the headset switches.
	They're just voltage changes.
[x] Implement arbiter.
[x] Debug arbiter implementation.
[x] k1el keyer has the hiccups.
[ ] Test ptt_head.
[x] Test ptt_tail.
[ ] ptt_head breaks key and ptt.
[ ] Rewrite effect_mute and put some of them back into the graph.
[ ] Allow line-in to route through filters to headphone-out.
[ ] Allow line-in to route through sdr and filters to headphone-out.
[x] Implement ptt_delay.
[x] Debug ptt_delay as incorporated into arbiter
[ ] Test ptt_delay.
[ ] Debounce the straight key.	
	Each transition in the straight key is stretched to one buffer worth
	before another transition is considered.
[ ] Ease in the volume changes, get rid of the pop.
[ ] Apply headphone volume to hdw_out mixer.
[?] Try the fixed point complex rotor, both for sincos and ramp,
	and with multiply_32x32_rshift32 instruction, it might.
[?] Would still need to call sin/cos to compute the phase increment.
[ ] Echo parameter set to MIDI to update Ctrlr.
[ ] Implement save/restore parameters to EEPROM
	[ ] save parameters as the nrpn block and a bitset of
	which have been set.
	[ ] restore parameters and bitset and apply those which
	must be pushed, but no hard volume changes.
[ ] Implement save/restore parameters as SYSEX
	[ ] nibblize the nrpn block and send it to the ctrlr
	which is built for slamming those things around.
[ ] Implement default parameters from flash.
[ ] Implement a reverse snapshot, sending CC NRPN's for all parameters
	to Ctrlr.
[ ] Add tab to ctrlr panel for specifying morse key codes for characters.
[ ] Add tab to ctrlr panel for the mixer matrix, with presets.
[ ] Pan sidetone to localize.
[?] Add phase shifting filters to localize rx_audio.
[ ] implement KYRP_IQ_PHASE excess 1<<13 tweak to iq phase, units tbd, +/- 8k
[ ] implement KYRP_IQ_BALANCE excess 1<<13 tweak to iq levels, units tbd, +/- 8k
[ ] implement send midi under get_send_midi()
[ ] implement receive midi under get_recv_midi()
[x] clean up linkage, it doesn't need the set_*() functions.
[ ] clean up linkage, get* should be in order of config.h
* Todo list as of 2020-03-04
[x] implement headset microphone.
[x] get rid of the ramp crunches, 
	I think I'm passing an overflowed ramp value, I'm hearing the ramp
	scalar go negative at the peak.  Much less than earlier, but still
	a click that I can hear.
[?] Figure out why the buffer allocation goes to 64k
	It appears to have fixed itself somewhere.
[x] Figure out why total audio cpu usage is now off scale while audio component
	cpu usages are very low and reasonable.  Very dicey percentage computation
[x] Add NRPN for mixer matrix presets.
	in principle, 24 NRPN's allocated, but 
[x] key ramp should fetch rise and fall ramp parameters at start of ramp on,
	then if the arbiter pre-empts the voice it will stop with its own
	voice parameters, the new active voice will take effect at the next 
	on ramp.
[x] reimplement hann and blackman harris ramps.
[x] add linear ramp.
[x] reimplement sine table.
* Todo list as of 2021-03-01
[x] add vox to keyer constructors
[x] declare keyer timing, tone, and ramp getters.
[x] define keyer timing, tone, ramp getters.
[x] define nrpn getter.
[x] add back the perdit, perdah, peries, perils, periws pseudo-nrpns
[x] figure out if that blackman-harris is right, it is.
[-] add ramp pseudo-nrpns, translating 10ths of ms into samples
	I don't think it's necessary.  It's one multiply.
[x] Redo the ramp code.
[x] Finish up the text_input
[x] Install the lorem ipsum test text
[x] Make the reusable buffer to run length code
	int16_t run_length(audio_buffer_t *block) returns the length of the first
	run in *block.
	Not necessary, the paddle is debounced by the keyer, text has no bounces,
	the straight key is the only signal with bounces, everything else is
	streams of zeros or ones longer than four 128 sample buffers, so each
	buffer (except for straight key) is describe by the initial run length.
[x] Make a keyed oscillator effect.
	[x] Can turn the oscillator(s) off when not in use
	[x] Poll oscillator and ramp parameters when activated
	[-] Use the 1024 point window functions for the ramps.
		no, only need the first half.
	[x] Continue to interpolate the ramps.
	[x] Continue to interpolate the sine.
[x] Implement the rest of the parameters, for some value of rest:
	[x] Should all be polled at the last moment before they
	are applied.
	[x] keyers poll for dit, dah, ies, ils, iws at the
	moment the element is to be started.
	[x] oscillators poll for frequency and phase when started
	at the beginning of an element.
	[x] ramp poll for ramp type and time length when starting
	the ramp.
	[x] but the codec controls won't be polled, they must be
	pushed, but no hard volume changes.
[x] Figure out floating valued modulators.  I can specify a
	controller which displays a floating point value, but
	when I try to scale it to an integer value for transmission
	it's already been truncated to its integer value.
	I don't think they work, none of the example panels uses
	anything but int values.
[x] Add a 128 or 256 NRPN block for setting the 14 bit morse key codes 
	for 7 or 8 bit input characters.  Yeah, just 64 slots from ! to `.
[x] Define NRPN's in 4 blocks, pad each block so there's room for
	revisions without breaking existing assignments,
	nrpn[N_SOFT_NRPN+N_CODEC_NRPN+N_VOX_NRPN+(N_VOX*N_VOX_NRPN)
	[x] codec NRPN's
	[x] global keyer NRPN's
	[x] morse code table
	[x] mixer matrix
	[x] default keyer voice NRPN's
	[x] keyer voice specific NRPN's
[x] Move the IQ_ENABLE and IQ_ADJUST NRPN's to SOFT global block.

	
